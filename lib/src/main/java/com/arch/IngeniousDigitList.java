/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.arch;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.List;

public class IngeniousDigitList extends AbstractList<IngeniousDigit> {
    /**
     * The 2d array of 3x3 characters that make up the Ingenious Number
     */
    private final char[][] _digitLines;

    /**
     * @param ingeniousDigitLine a String consisting of 3x3-sized ASCII art of
     * numbers, with a trailing newline
     */
    public IngeniousDigitList(String ingeniousDigitLine){
        String[] lines = ingeniousDigitLine.split("\n");

        if(lines.length != 3){
            throw new IllegalArgumentException(
                "Ingenious digits should be *3* lines of ASCII art, got: '" + ingeniousDigitLine + "'"
            );
        }

        _digitLines = Arrays.stream(lines).map(String::toCharArray).toArray(char[][]::new);
    }

    @Override
    public IngeniousDigit get(int index) {
        StringBuilder digit = new StringBuilder();
        int baseChar = index * 3;

        for(int y = 0; y < 3; y++){
            for(int x = 0; x < 3; x++){
                digit.append(_digitLines[y][baseChar + x]);
            }
            digit.append('\n');
        }

        return new IngeniousDigit(digit.toString());
    }

    @Override
    public int size() {
        return Arrays.stream(_digitLines).mapToInt(a -> a.length).max().getAsInt() / 3;
    }

    @Override
    public boolean add(IngeniousDigit e) {
        return false;
    }

    @Override
    public String toString() {
        StringBuilder number = new StringBuilder();
        stream().map(IngeniousDigit::toString).forEach(number::append);

        return number.toString();
    }

    /**
     * @return the {@link #toString()}, but with error checking!
     *
     * Outputting ILL for entries with digits we can't parse, and
     * ERR for ones that we can, but fail checksum.
     */
    public String toStringWithValidation(){
        String digits = toString();

        if(digits.contains("?")){
            return digits + " ILL";
        }

        if(!hasValidChecksum()){
            return digits + " ERR";
        }

        return digits;
    }

    /**
     * @return true if the current ingenious digit list's checksum is valid!
     */
    public boolean hasValidChecksum(){
        return checksum(stream().map(IngeniousDigit::toInt).toList());
    }

    /**
     * Performs a checksum calculation for the passed in digits
     * @param digits a {@link List} of Integers to verify sums up correctly
     * @return true if the checksum is correct, false otherwise
     */
    static boolean checksum(List<Integer> digits){
        digits = digits.reversed();

        int checksum = digits.getFirst();
        int idx = 2;

        // checksum layout:
        //   account number:  3  4  5  8  8  2  8  6  5
        //   position names:  d9 d8 d7 d6 d5 d4 d3 d2 d1
        //
        // checksum calculation:
        //   (d1 + 2*d2 + 3*d3 +..+ 9*d9) mod 11 = 0
        for(int digit : digits.stream().skip(1).toList()){
            checksum += (digit * idx++);
        }

        return checksum % 11 == 0;
    }

}
